// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Nssol.Platypus.DataAccess;
using Nssol.Platypus.Infrastructure;
using System;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace EFMigrationTool.Migrations
{
    [DbContext(typeof(CommonDbContext))]
    [Migration("20180511030817_AddPartitionInNode")]
    partial class AddPartitionInNode
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("Relational:Sequence:.PortNoSeq", "'PortNoSeq', '', '50001', '1', '50001', '59999', 'Int64', 'True'");

            modelBuilder.Entity("Nssol.Platypus.Models.ClusterToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("KubeToken")
                        .IsRequired();

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<long>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("ClusterTokens");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.Git", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApiUrl")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("GitType")
                        .IsRequired();

                    b.Property<string>("Host");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Name");

                    b.Property<int?>("PortNo");

                    b.Property<string>("PrivateKey")
                        .IsRequired();

                    b.Property<string>("RepositoryUrl")
                        .IsRequired();

                    b.Property<string>("Token");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Gits");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.Menu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<string>("Controller");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<string>("Locale")
                        .IsRequired();

                    b.Property<string>("MenuCode")
                        .IsRequired();

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ParentMenuCode")
                        .IsRequired();

                    b.Property<string>("ShowTopFlag");

                    b.HasKey("Id");

                    b.HasIndex("MenuCode", "Locale")
                        .IsUnique();

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.Node", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessLevel");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("Memo");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Partition");

                    b.HasKey("Id");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.NodeTenantMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<long>("NodeId");

                    b.Property<long>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.HasIndex("TenantId");

                    b.ToTable("NodeTenantMaps");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.Port", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("Host");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<long>("No")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('\"PortNoSeq\"')");

                    b.HasKey("Id");

                    b.ToTable("Ports");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.Registry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApiUrl");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("Host")
                        .IsRequired();

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password");

                    b.Property<int>("PortNo");

                    b.Property<string>("RegistryType")
                        .IsRequired();

                    b.Property<string>("RegistryUrl")
                        .IsRequired();

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Registries");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("RoleType")
                        .IsRequired();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.RoleDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AssignType")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<long>("RoleId");

                    b.Property<long?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.HasIndex("RoleId", "TenantId", "UserId")
                        .IsUnique();

                    b.ToTable("RoleDetails");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.SystemMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("Locale")
                        .IsRequired();

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<DateTime>("NotifiedAt");

                    b.Property<string>("SeqNum")
                        .IsRequired();

                    b.Property<string>("Subject")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("SeqNum", "Locale")
                        .IsUnique();

                    b.ToTable("SystemMessages");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.Tenant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<long?>("GitId");

                    b.Property<long?>("JobTimeout");

                    b.Property<decimal?>("LimitCpu");

                    b.Property<decimal?>("LimitGpu");

                    b.Property<decimal?>("LimitMemory");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<long?>("RegistryId");

                    b.Property<string>("StorageAccessKey");

                    b.Property<string>("StorageBucket");

                    b.Property<string>("StorageSecretKey");

                    b.Property<string>("StorageServer");

                    b.HasKey("Id");

                    b.HasIndex("GitId");

                    b.HasIndex("RegistryId");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.AccessibleMenu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("MenuCode")
                        .IsRequired();

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("RoleName")
                        .IsRequired();

                    b.Property<long>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "MenuCode", "RoleName")
                        .IsUnique();

                    b.ToTable("AccessibleMenus");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.Annotation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("FileName")
                        .IsRequired();

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("StoredPath")
                        .IsRequired();

                    b.Property<long>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Annotations");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.AttachFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<byte[]>("Data");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AttachFiles");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.Data", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AnnotationId");

                    b.Property<string>("Attribute");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<long?>("DisplayId");

                    b.Property<string>("FileName");

                    b.Property<string>("Memo");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("StoredPath");

                    b.Property<long>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Data");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.DataFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("FileName")
                        .IsRequired();

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("StoredPath")
                        .IsRequired();

                    b.Property<long>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("DataFiles");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.DataProperty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<long>("DataFileId");

                    b.Property<long>("DataId");

                    b.Property<string>("DataString");

                    b.Property<string>("Key")
                        .IsRequired();

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<long>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("DataFileId");

                    b.HasIndex("DataId");

                    b.HasIndex("TenantId");

                    b.ToTable("DataProperties");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.DataSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<uint>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<long?>("DisplayId");

                    b.Property<string>("Memo");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("DataSets");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.DataSetEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<long>("DataId");

                    b.Property<long>("DataSetId");

                    b.Property<long>("DataTypeId");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<long>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("DataId");

                    b.HasIndex("DataSetId");

                    b.HasIndex("DataTypeId");

                    b.HasIndex("TenantId");

                    b.ToTable("DataSetEntries");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.DataTagMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<long>("DataId");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<long>("TagId");

                    b.Property<long>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("DataId");

                    b.HasIndex("TagId");

                    b.HasIndex("TenantId");

                    b.ToTable("DataTagMaps");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.DataType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("DataTypes");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.EvaluationHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Argument")
                        .IsRequired();

                    b.Property<DateTime?>("CompletedAt");

                    b.Property<uint>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.Property<string>("Container")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<long?>("DataSetId");

                    b.Property<string>("EvalLogFileName");

                    b.Property<string>("EvalLogStoredPath");

                    b.Property<string>("EvalResultFileName");

                    b.Property<string>("EvalResultStoredPath");

                    b.Property<string>("GpuDriver");

                    b.Property<string>("LogSummary");

                    b.Property<string>("Memo");

                    b.Property<string>("ModelCommitId")
                        .IsRequired();

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<long>("TenantId");

                    b.Property<long>("TrainingHistoryId");

                    b.HasKey("Id");

                    b.HasIndex("DataSetId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TrainingHistoryId");

                    b.ToTable("EvaluationHistories");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.InputPersonalSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<long>("InputSettingId");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("PrimaryFlag");

                    b.Property<int?>("SortOrder");

                    b.Property<long>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("InputSettingId");

                    b.HasIndex("TenantId", "InputSettingId", "UserId")
                        .IsUnique();

                    b.ToTable("InputPersonalSettings");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.InputSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<int?>("DefaultSortOrder");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<long?>("RoleId");

                    b.Property<string>("ShareType")
                        .IsRequired();

                    b.Property<string>("TargetType")
                        .IsRequired();

                    b.Property<long>("TenantId");

                    b.Property<string>("UseType")
                        .IsRequired();

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("InputSettings");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.InputSettingDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<long>("InputSettingId");

                    b.Property<string>("ItemCode");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<int>("SeqNum");

                    b.Property<long>("TenantId");

                    b.Property<string>("Value1");

                    b.Property<string>("Value2");

                    b.Property<string>("Value3");

                    b.Property<string>("Value4");

                    b.Property<string>("Value5");

                    b.HasKey("Id");

                    b.HasIndex("InputSettingId");

                    b.HasIndex("TenantId", "InputSettingId", "SeqNum")
                        .IsUnique();

                    b.ToTable("InputSettingDetails");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.ItemDef", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("DataType");

                    b.Property<string>("DefaultValue1");

                    b.Property<string>("DefaultValue2");

                    b.Property<string>("DefaultValue3");

                    b.Property<string>("DefaultValue4");

                    b.Property<string>("DefaultValue5");

                    b.Property<int?>("Digit");

                    b.Property<int?>("DisplayWidth");

                    b.Property<string>("GroupId");

                    b.Property<string>("ItemCode")
                        .IsRequired();

                    b.Property<string>("ItemName");

                    b.Property<string>("Locale")
                        .IsRequired();

                    b.Property<string>("MaxValue");

                    b.Property<string>("MinValue");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Required");

                    b.Property<long>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ItemCode", "Locale")
                        .IsUnique();

                    b.ToTable("ItemDefs");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.Job", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AllArgument1");

                    b.Property<string>("AllArgument2");

                    b.Property<string>("AllArgument3");

                    b.Property<string>("AllArgument4");

                    b.Property<string>("AllArgument5");

                    b.Property<string>("Argument1");

                    b.Property<string>("Argument2");

                    b.Property<string>("Argument3");

                    b.Property<string>("Argument4");

                    b.Property<string>("Argument5");

                    b.Property<string>("AssignedPort1");

                    b.Property<string>("AssignedPort2");

                    b.Property<string>("AssignedPort3");

                    b.Property<string>("AssignedPort4");

                    b.Property<string>("AssignedPort5");

                    b.Property<uint>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.Property<string>("ConfigType");

                    b.Property<string>("Configuration");

                    b.Property<string>("Container")
                        .IsRequired();

                    b.Property<string>("ContainerStdErrStoredPath");

                    b.Property<string>("ContainerStdOutStoredPath");

                    b.Property<int>("Cpu");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime?>("EndAt");

                    b.Property<string>("EntryPoint1");

                    b.Property<string>("EntryPoint2");

                    b.Property<string>("EntryPoint3");

                    b.Property<string>("EntryPoint4");

                    b.Property<string>("EntryPoint5");

                    b.Property<long>("ExecUserId");

                    b.Property<string>("ExecUserName")
                        .IsRequired();

                    b.Property<int>("Gpu");

                    b.Property<string>("GpuDriver");

                    b.Property<string>("Group");

                    b.Property<string>("InParam1");

                    b.Property<string>("InParam2");

                    b.Property<string>("InParam3");

                    b.Property<string>("InParam4");

                    b.Property<string>("InParam5");

                    b.Property<string>("InputDataType")
                        .IsRequired();

                    b.Property<string>("JobType")
                        .IsRequired();

                    b.Property<string>("LogSummary");

                    b.Property<string>("MailAddress");

                    b.Property<string>("MailType");

                    b.Property<string>("Memo");

                    b.Property<int>("Memory");

                    b.Property<string>("ModelCommitId");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("NodeName");

                    b.Property<string>("OutParam1");

                    b.Property<string>("OutParam10");

                    b.Property<string>("OutParam2");

                    b.Property<string>("OutParam3");

                    b.Property<string>("OutParam4");

                    b.Property<string>("OutParam5");

                    b.Property<string>("OutParam6");

                    b.Property<string>("OutParam7");

                    b.Property<string>("OutParam8");

                    b.Property<string>("OutParam9");

                    b.Property<long?>("ParentJobId");

                    b.Property<string>("Partition");

                    b.Property<long?>("PortId1");

                    b.Property<long?>("PortId2");

                    b.Property<long?>("PortId3");

                    b.Property<long?>("PortId4");

                    b.Property<long?>("PortId5");

                    b.Property<long?>("PrevJobId");

                    b.Property<string>("Repository");

                    b.Property<DateTime?>("StartAt");

                    b.Property<string>("StartUpType")
                        .IsRequired();

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<DateTime?>("SubmitAt");

                    b.Property<long?>("TaskId");

                    b.Property<long?>("TaskNum");

                    b.Property<string>("TaskType");

                    b.Property<long>("TenantId");

                    b.Property<long?>("Timeout");

                    b.Property<DateTime?>("TruncLogAt");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.JobEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("Count");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("FirstTimestamp");

                    b.Property<long>("JobId");

                    b.Property<DateTime>("LastTimestamp");

                    b.Property<string>("Message");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Reason");

                    b.Property<long>("TenantId");

                    b.Property<string>("Type");

                    b.Property<string>("Uid");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("TenantId");

                    b.ToTable("JobEvents");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.LookUp", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("GroupId")
                        .IsRequired();

                    b.Property<string>("Locale")
                        .IsRequired();

                    b.Property<string>("LookUpId")
                        .IsRequired();

                    b.Property<string>("LookUpName");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<long>("SortOrder");

                    b.Property<long>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "GroupId", "LookUpId", "Locale")
                        .IsUnique();

                    b.ToTable("LookUps");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.Preprocess", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContainerImage");

                    b.Property<long?>("ContainerRegistryId");

                    b.Property<string>("ContainerTag");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<long?>("DisplayId");

                    b.Property<string>("EntryPoint");

                    b.Property<string>("Memo");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("RepositoryBranch");

                    b.Property<string>("RepositoryCommitId");

                    b.Property<string>("RepositoryName");

                    b.Property<string>("RepositoryOwner");

                    b.Property<long>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ContainerRegistryId");

                    b.HasIndex("TenantId");

                    b.ToTable("Preprocesses");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.PreprocessedImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AnnotationFileName");

                    b.Property<string>("AnnotationStoredPath");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("ImageFileName");

                    b.Property<string>("ImageStoredPath");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<long?>("OutputDataId");

                    b.Property<long>("PreprocessHistoryId");

                    b.Property<long>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("OutputDataId");

                    b.HasIndex("PreprocessHistoryId");

                    b.HasIndex("TenantId");

                    b.ToTable("PreprocessHistoryOutputs");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.PreprocessHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CompletedAt");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<long>("InputDataId");

                    b.Property<string>("Memo");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<long?>("PreprocessId");

                    b.Property<string>("Status");

                    b.Property<long>("StatusId");

                    b.Property<long>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("InputDataId");

                    b.HasIndex("PreprocessId");

                    b.HasIndex("TenantId");

                    b.ToTable("PreprocessHistories");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.SearchConditionDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("ItemCode");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<long>("SearchSettingId");

                    b.Property<string>("SearchType");

                    b.Property<int>("SeqNum");

                    b.Property<long>("TenantId");

                    b.Property<string>("Value1");

                    b.Property<string>("Value2");

                    b.Property<string>("Value3");

                    b.Property<string>("Value4");

                    b.Property<string>("Value5");

                    b.HasKey("Id");

                    b.HasIndex("SearchSettingId");

                    b.HasIndex("TenantId", "SearchSettingId", "SeqNum")
                        .IsUnique();

                    b.ToTable("SearchConditionDetails");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.SearchPersonalSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("PrimaryFlag");

                    b.Property<long>("SearchSettingId");

                    b.Property<int?>("SortOrder");

                    b.Property<long>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SearchSettingId");

                    b.HasIndex("TenantId", "SearchSettingId", "UserId")
                        .IsUnique();

                    b.ToTable("SearchPersonalSettings");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.SearchResultDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("DisplayFlag");

                    b.Property<string>("ItemCode");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<long>("SearchSettingId");

                    b.Property<int>("SeqNum");

                    b.Property<long>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("SearchSettingId");

                    b.HasIndex("TenantId", "SearchSettingId", "SeqNum")
                        .IsUnique();

                    b.ToTable("SearchResultDetails");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.SearchSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("FirstSortItem");

                    b.Property<string>("FirstSortType");

                    b.Property<int>("LineNumber");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<long?>("RoleId");

                    b.Property<string>("SecondSortItem");

                    b.Property<string>("SecondSortType");

                    b.Property<string>("ShareType")
                        .IsRequired();

                    b.Property<string>("TargetType")
                        .IsRequired();

                    b.Property<long>("TenantId");

                    b.Property<string>("UseType")
                        .IsRequired();

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("SearchSettings");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.Status", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.TensorBoardContainer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long>("PortId");

                    b.Property<DateTime>("StartedAt");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<long>("TenantId");

                    b.Property<long>("TrainingHistoryId");

                    b.HasKey("Id");

                    b.HasIndex("PortId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TrainingHistoryId");

                    b.ToTable("TensorBoardContainers");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.TrainingHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CompletedAt");

                    b.Property<uint>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.Property<string>("Configuration");

                    b.Property<string>("ContainerImage")
                        .IsRequired();

                    b.Property<long?>("ContainerRegistryId");

                    b.Property<string>("ContainerStdErrStoredPath");

                    b.Property<string>("ContainerStdOutStoredPath");

                    b.Property<string>("ContainerTag");

                    b.Property<int>("Cpus");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<long>("DataSetId");

                    b.Property<long?>("DisplayId");

                    b.Property<string>("EntryPoint");

                    b.Property<string>("EvalArgument");

                    b.Property<string>("GpuDriver");

                    b.Property<int>("Gpus");

                    b.Property<string>("LogSummary");

                    b.Property<int>("Mem");

                    b.Property<string>("Memo");

                    b.Property<string>("ModelBranch");

                    b.Property<string>("ModelCommitId");

                    b.Property<string>("ModelRepository");

                    b.Property<string>("ModelRepositoryOwner");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Name");

                    b.Property<string>("Options");

                    b.Property<long?>("ParentId");

                    b.Property<string>("Partition");

                    b.Property<long?>("PreprocessId");

                    b.Property<string>("Status");

                    b.Property<long>("TenantId");

                    b.Property<string>("TestLogFileName");

                    b.Property<string>("TestLogStoredPath");

                    b.Property<string>("TrainArgument");

                    b.Property<string>("TrainLogFileName");

                    b.Property<string>("TrainLogStoredPath");

                    b.Property<string>("TrainedParameterFileName");

                    b.Property<string>("TrainedParameterStoredPath");

                    b.Property<bool>("UseParentAsPreTrain");

                    b.Property<string>("User");

                    b.HasKey("Id");

                    b.HasIndex("ContainerRegistryId");

                    b.HasIndex("DataSetId");

                    b.HasIndex("ParentId");

                    b.HasIndex("PreprocessId");

                    b.HasIndex("TenantId");

                    b.ToTable("TrainingHistories");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.TrainingHistoryAttachedFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("FileName")
                        .IsRequired();

                    b.Property<string>("Key");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("StoredPath")
                        .IsRequired();

                    b.Property<long>("TenantId");

                    b.Property<long>("TrainingHistoryId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("TrainingHistoryId");

                    b.ToTable("TrainingHistoryAttachedFiles");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.TrainingHistoryTagMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<long>("TagId");

                    b.Property<long>("TenantId");

                    b.Property<long>("TrainingHistoryId");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TrainingHistoryId");

                    b.ToTable("TrainingHistoryTagMaps");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<long?>("DefaultTenantId");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DefaultTenantId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.UserMapping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<long>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId")
                        .IsUnique();

                    b.ToTable("UserMappings");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.ClusterToken", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nssol.Platypus.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.NodeTenantMap", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Node", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.RoleDetail", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("Nssol.Platypus.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.Tenant", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Git", "Git")
                        .WithMany()
                        .HasForeignKey("GitId");

                    b.HasOne("Nssol.Platypus.Models.Registry", "Registry")
                        .WithMany()
                        .HasForeignKey("RegistryId");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.AccessibleMenu", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.Annotation", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.AttachFile", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.Data", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.DataFile", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.DataProperty", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantModels.DataFile", "DataFile")
                        .WithMany()
                        .HasForeignKey("DataFileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nssol.Platypus.Models.TenantModels.Data", "Data")
                        .WithMany()
                        .HasForeignKey("DataId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.DataSet", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.DataSetEntry", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantModels.Data", "Data")
                        .WithMany()
                        .HasForeignKey("DataId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nssol.Platypus.Models.TenantModels.DataSet", "DataSet")
                        .WithMany("DataSetEntries")
                        .HasForeignKey("DataSetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nssol.Platypus.Models.TenantModels.DataType", "DataType")
                        .WithMany()
                        .HasForeignKey("DataTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.DataTagMap", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantModels.Data", "Data")
                        .WithMany("TagMaps")
                        .HasForeignKey("DataId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nssol.Platypus.Models.TenantModels.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.DataType", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.EvaluationHistory", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantModels.DataSet", "DataSet")
                        .WithMany()
                        .HasForeignKey("DataSetId");

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nssol.Platypus.Models.TenantModels.TrainingHistory", "TrainingHistory")
                        .WithMany()
                        .HasForeignKey("TrainingHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.InputPersonalSetting", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantModels.InputSetting", "InputSetting")
                        .WithMany()
                        .HasForeignKey("InputSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.InputSetting", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.InputSettingDetail", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantModels.InputSetting", "InputSetting")
                        .WithMany()
                        .HasForeignKey("InputSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.ItemDef", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.Job", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.JobEvent", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantModels.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.LookUp", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.Preprocess", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Registry", "ContainerRegistry")
                        .WithMany()
                        .HasForeignKey("ContainerRegistryId");

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.PreprocessedImage", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantModels.Data", "OutputData")
                        .WithMany()
                        .HasForeignKey("OutputDataId");

                    b.HasOne("Nssol.Platypus.Models.TenantModels.PreprocessHistory", "PreprocessHistory")
                        .WithMany("PreprocessHistoryOutputs")
                        .HasForeignKey("PreprocessHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.PreprocessHistory", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantModels.Data", "InputData")
                        .WithMany()
                        .HasForeignKey("InputDataId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nssol.Platypus.Models.TenantModels.Preprocess", "Preprocess")
                        .WithMany()
                        .HasForeignKey("PreprocessId");

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.SearchConditionDetail", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantModels.SearchSetting", "SearchSetting")
                        .WithMany()
                        .HasForeignKey("SearchSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.SearchPersonalSetting", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantModels.SearchSetting", "SearchSetting")
                        .WithMany()
                        .HasForeignKey("SearchSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.SearchResultDetail", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantModels.SearchSetting", "SearchSetting")
                        .WithMany()
                        .HasForeignKey("SearchSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.SearchSetting", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.Status", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.Tag", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.TensorBoardContainer", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Port", "Port")
                        .WithMany()
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nssol.Platypus.Models.TenantModels.TrainingHistory", "TrainingHistory")
                        .WithMany()
                        .HasForeignKey("TrainingHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.TrainingHistory", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Registry", "ContainerRegistry")
                        .WithMany()
                        .HasForeignKey("ContainerRegistryId");

                    b.HasOne("Nssol.Platypus.Models.TenantModels.DataSet", "DataSet")
                        .WithMany()
                        .HasForeignKey("DataSetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nssol.Platypus.Models.TenantModels.TrainingHistory", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("Nssol.Platypus.Models.TenantModels.Preprocess", "Preprocess")
                        .WithMany()
                        .HasForeignKey("PreprocessId");

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.TrainingHistoryAttachedFile", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nssol.Platypus.Models.TenantModels.TrainingHistory", "TrainingHistory")
                        .WithMany("TrainingHistoryAttachedFile")
                        .HasForeignKey("TrainingHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.TrainingHistoryTagMap", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantModels.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nssol.Platypus.Models.TenantModels.TrainingHistory", "TrainingHistory")
                        .WithMany()
                        .HasForeignKey("TrainingHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.User", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "DefaultTenant")
                        .WithMany()
                        .HasForeignKey("DefaultTenantId");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.UserMapping", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nssol.Platypus.Models.User", "User")
                        .WithMany("UserMappings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
